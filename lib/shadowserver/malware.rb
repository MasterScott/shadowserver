require 'net/http'
require 'net/https'
require 'json'
require 'uri'

module Shadowserver
	class Malware
		def Malware::query(hash)
			doc = _get("http://innocuous.shadowserver.org/api/?query=#{hash}")
			return nil if doc =~ /^\!/
			lines = doc.split(/\n/)
			md5, sha1, first_seen, last_seen, filetype, ssdeep = lines[0].gsub(/\"/,'').split(/,/)
			avresults = JSON.parse(lines[1])
			{
				"md5" => md5,
				"sha1" => sha1,
				"first_seen" => first_seen,
				"last_seen" => last_seen,
				"filetype" => filetype,
				"ssdeep" => ssdeep,
				"avresults" => avresults
			}
		end
		
		def Malware::download(hash,filename=nil)
			doc = _get("https://innocuous.shadowserver.org/api/?download=#{hash}")
			raise doc.chomp if doc =~ /\! The Shadowserver Foundation:  RESTRICTED ACCESS/
			return nil if doc =~ /^\! The Shadowserver Foundation:/
			if filename
				File.open(filename,"w") do |f|
					f.write(doc)
				end
			end
			doc
		end
		
		def Malware::avresult(hash)
			doc = _get("http://innocuous.shadowserver.org/api/?avresult=#{hash}")
			raise doc.chomp if doc =~ /\! The Shadowserver Foundation:  RESTRICTED ACCESS/
			return nil if doc =~ /^\! The Shadowserver Foundation:/
			results = {}
			doc.split(/\n/).each do |l|
				next if l =~ /^"name","classification"/
				name, classification = l.gsub(/"/,'').split(/,/,2)
				results[name] = classification
			end
			results
		end
		
		def Malware::ssdeep(hash)
			doc = _get("http://innocuous.shadowserver.org/api/?ssdeep=#{hash}")
			raise doc.chomp if doc =~ /\! The Shadowserver Foundation:  RESTRICTED ACCESS/
			return nil if doc =~ /^\! The Shadowserver Foundation:/
			doc.split(/\n/)
		end
	end

	def  Malware::_get(url)
		url = URI.parse(url)
		request = Net::HTTP::Get.new(url.path+"?"+url.query)
		request.add_field("User-Agent", "Ruby/#{RUBY_VERSION} shadowserver rubygem (https://github.com/chrislee35/shadowserver)")
		http = Net::HTTP.new(url.host, url.port)
		if url.scheme == 'https'
			http.use_ssl = true
			http.verify_mode = OpenSSL::SSL::VERIFY_NONE
			http.verify_depth = 5
		end
		resp = http.request(request)
		resp.body
	end
end
